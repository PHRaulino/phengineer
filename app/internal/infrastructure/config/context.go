package config

import (
	"context"
	"fmt"
	"path/filepath"
)

// configKey √© a chave para armazenar a config no context
type configKey struct{}

// WithConfig adiciona a configura√ß√£o ao context
func WithConfig(ctx context.Context, configFolderName string) (context.Context, error) {
	// Valida requirements primeiro
	validator := NewRequirementsValidator(configFolderName)
	if err := validator.ValidateAll(); err != nil {
		return nil, fmt.Errorf("requirements validation failed: %w", err)
	}

	// Coleta configura√ß√µes autom√°ticas
	autoConfig, err := collectAutoConfig(configFolderName)
	if err != nil {
		return nil, fmt.Errorf("failed to collect auto config: %w", err)
	}

	// Carrega configura√ß√µes do settings.yml
	settingsPath := filepath.Join(autoConfig.ConfigDirPath, "settings.yml")
	settings, err := LoadOrCreateSettings(settingsPath)
	if err != nil {
		return nil, fmt.Errorf("failed to load settings: %w", err)
	}

	// Cria a configura√ß√£o completa
	config := &Config{
		Settings:   settings,
		Auto:       autoConfig,
		ConfigPath: autoConfig.ConfigDirPath,
	}

	return context.WithValue(ctx, configKey{}, config), nil
}

// WithConfigVerbose adiciona a configura√ß√£o ao context com sa√≠da detalhada
func WithConfigVerbose(ctx context.Context, configFolderName string) (context.Context, error) {
	fmt.Println("üîç Validating requirements...")

	// Valida requirements com detalhes
	validator := NewRequirementsValidator(configFolderName)
	results, err := validator.ValidateWithDetails()

	// Mostra o status de cada requirement
	for _, result := range results {
		status := "‚úÖ"
		if !result.Passed {
			status = "‚ùå"
		}
		fmt.Printf("  %s %s: %s\n", status, result.Name, result.Description)

		if !result.Passed {
			fmt.Printf("    Error: %s\n", result.ErrorMsg)
		}
	}

	if err != nil {
		fmt.Printf("\n‚ùå Requirements validation failed: %v\n", err)
		return nil, err
	}

	fmt.Println("\nüìã Collecting auto configurations...")

	// Coleta configura√ß√µes autom√°ticas
	autoConfig, err := collectAutoConfig(configFolderName)
	if err != nil {
		fmt.Printf("‚ùå Failed to collect auto config: %v\n", err)
		return nil, err
	}

	fmt.Printf("  üì± App Name: %s\n", autoConfig.AppName)
	fmt.Printf("  üìÅ Config Dir: %s\n", autoConfig.ConfigDirPath)
	fmt.Printf("  üåê Remote URL: %s\n", autoConfig.RemoteURL)

	fmt.Println("\nüìÑ Loading settings.yml...")

	// Carrega configura√ß√µes do settings.yml
	settingsPath := filepath.Join(autoConfig.ConfigDirPath, "settings.yml")
	settings, err := LoadOrCreateSettings(settingsPath)
	if err != nil {
		fmt.Printf("‚ùå Failed to load settings: %v\n", err)
		return nil, err
	}

	fmt.Printf("  ‚öôÔ∏è  Project Type: %s\n", settings.Project.Type)
	fmt.Printf("  üíª Language: %s %s\n", settings.Project.Language.Name, settings.Project.Language.Version)
	fmt.Printf("  üìä Include Path: %s\n", settings.Analysis.FilesIncludePath)
	fmt.Printf("  üö´ Exclude Path: %s\n", settings.Analysis.FilesExcludePath)

	// Cria a configura√ß√£o completa
	config := &Config{
		Settings:   settings,
		Auto:       autoConfig,
		ConfigPath: autoConfig.ConfigDirPath,
	}

	fmt.Println("\n‚úÖ Configuration loaded successfully!")

	return context.WithValue(ctx, configKey{}, config), nil
}

// FromContext extrai a configura√ß√£o do context
func FromContext(ctx context.Context) *Config {
	if config, ok := ctx.Value(configKey{}).(*Config); ok {
		return config
	}
	panic("config not found in context - make sure to call config.WithConfig() first")
}

// MustFromContext extrai a configura√ß√£o do context ou retorna erro
func MustFromContext(ctx context.Context) (*Config, error) {
	if config, ok := ctx.Value(configKey{}).(*Config); ok {
		return config, nil
	}
	return nil, fmt.Errorf("config not found in context")
}

// HasConfig verifica se o context possui configura√ß√£o
func HasConfig(ctx context.Context) bool {
	_, ok := ctx.Value(configKey{}).(*Config)
	return ok
}

// GetSettings extrai apenas as configura√ß√µes do settings.yml do context
func GetSettings(ctx context.Context) *Settings {
	return FromContext(ctx).Settings
}

// GetAutoConfig extrai apenas as configura√ß√µes autom√°ticas do context
func GetAutoConfig(ctx context.Context) *AutoConfig {
	return FromContext(ctx).Auto
}

// PrintDiagnostics imprime informa√ß√µes de diagn√≥stico da configura√ß√£o
func PrintDiagnostics(ctx context.Context) {
	config := FromContext(ctx)

	fmt.Println("üìã Configuration Diagnostics")
	fmt.Printf("  üì± App Name: %s\n", config.Auto.AppName)
	fmt.Printf("  üìÅ Config Path: %s\n", config.ConfigPath)
	fmt.Printf("  üåê Remote URL: %s\n", config.Auto.RemoteURL)

	fmt.Println("\n‚öôÔ∏è  Project Settings:")
	fmt.Printf("  Type: %s\n", config.Settings.Project.Type)
	fmt.Printf("  Language: %s %s\n", config.Settings.Project.Language.Name, config.Settings.Project.Language.Version)

	fmt.Println("\nüìä Analysis Settings:")
	fmt.Printf("  Include: %s\n", config.Settings.Analysis.FilesIncludePath)
	fmt.Printf("  Exclude: %s\n", config.Settings.Analysis.FilesExcludePath)
	fmt.Printf("  Max File Size: %s\n", config.Settings.Analysis.FileLimits.MaxFileSize)
	fmt.Printf("  Max Files: %d\n", config.Settings.Analysis.FileLimits.MaxFiles)
}
